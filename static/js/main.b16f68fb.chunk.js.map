{"version":3,"sources":["components/WeatherWidget/WeatherItem.js","components/WeatherWidget/WeatherList.js","components/WeatherWidget/AddedCities.js","components/WeatherWidget/WeatherSettings.js","components/WeatherWidget/WeatherWidget.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherItem","deg","cityId","selectedUnits","useState","currentCityData","setCurrentCityData","getTempUnit","useEffect","undefined","fetch","then","response","ok","Promise","reject","Error","data","json","name","country","sys","temperature","main","temp","feelsLike","feels_like","pressure","humidity","visibility","windDirection","wind","windSpeed","speed","description","weather","icon","catch","err","console","error","message","className","src","alt","style","transform","toFixed","WeatherList","cityList","isLocalWeatherOn","getReverseGeolocation","isMenuOpen","currentCityId","setCurrentCityId","getCurrentCity","navigator","geolocation","log","getPosition","resolve","getCurrentPosition","position","coords","latitude","longitude","getGeolocationByIp","getGeolocationApi","city","id","loc","split","display","map","index","AddedCities","setCityList","removeCity","onDragEnd","result","destination","source","items","Array","from","splice","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","draggableId","toString","draggableProps","dragHandleProps","type","onClick","placeholder","WeatherSettings","setIsLocalWeatherOn","setSelectedUnits","cityInputState","setCityInputState","matchingCities","setMatchingCities","toggleSelectedUnits","event","target","value","searchCityRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","onSubmit","preventDefault","checked","onChange","prev","lat","lon","some","item","WeatherWidget","setIsMenuOpen","RemIndex","filter","_","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0WA8FeA,MAzFf,YAAiD,IAmDbC,EAnDbC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,cAE7B,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KA8BA,SAASC,IACP,MAAqB,aAAlBJ,EACM,0CAEY,WAAlBA,EAEC,0CAGG,0CAyBT,OANAK,qBAAU,gBACMC,IAAXP,GAxDIQ,MAAM,sDAAD,OAAuDR,EAAvD,kBAAuEC,EAAvE,kBAPe,qCAQxBQ,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAEFE,QAAQC,OAAOC,MAAM,aAE7BL,MAAK,SAAAM,GAAI,OAAIA,EAAKC,UAElBP,MAAK,SAAAM,GAAI,OAAIX,EAAmB,CAC/Ba,KAAMF,EAAKE,KACXC,QAASH,EAAKI,IAAID,QAClBE,YAAaL,EAAKM,KAAKC,KACvBC,UAAWR,EAAKM,KAAKG,WACrBC,SAAUV,EAAKM,KAAKI,SACpBC,SAAUX,EAAKM,KAAKK,SACpBC,WAAYZ,EAAKY,WACjBC,cAAeb,EAAKc,KAAK9B,IACzB+B,UAAWf,EAAKc,KAAKE,MACrBC,YAAajB,EAAKkB,QAAQ,GAAGD,YAC7BE,KAAMnB,EAAKkB,QAAQ,GAAGC,UAEvBC,OAAM,SAACC,GACNC,QAAQC,MAAMF,EAAIG,cAoCtB,CAACvC,EAAQC,IAGT,sBAAKuC,UAAU,cAAf,UACE,qBAAIA,UAAU,yBAAd,UAAwCrC,EAAgBc,KAAxD,KAAgEd,EAAgBe,WAEhF,sBAAKsB,UAAU,uBAAf,UACE,qBAAKA,UAAU,oBAAoBC,IAAG,4CAAuCtC,EAAgB+B,KAAvD,WAAsEQ,IAAI,gBAChH,oBAAGF,UAAU,2BAAb,UAAyCrC,EAAgBiB,YAAzD,IAAuEf,UAGvE,oBAAGmC,UAAU,2BAAb,wBACcrC,EAAgBoB,UAD9B,IAC0ClB,IAD1C,KAC2DF,EAAgB6B,eAG7E,sBAAKQ,UAAU,wBAAf,UACE,oBAAGA,UAAU,6BAAb,cAA2C,sBAAMA,UAAU,wEAAwEG,MAAO,CAACC,UAAU,UAAD,OAAY,IAAIzC,EAAgByB,cAAhC,WAApJ,IAAmNzB,EAAgB2B,UAAnO,IAnCiB,aAAlB7B,EACM,MAEF,MAgCH,KA7B4BF,EA6B6PI,EAAgByB,mBA5BlSrB,IAARR,EACM,KAEa,CAAC,IAAK,MAAO,KAAM,MAAO,IAAK,MAAO,KAAM,MAAO,IAAK,MAAO,KAAM,MAAO,IAAK,MAAO,KAAM,MAAO,MAC7FA,EAAI,MAAM8C,QAAQ,QAyB5C,oBAAGL,UAAU,6BAAb,UAA0C,sBAAMA,UAAU,oEAA1D,IAAqIrC,EAAgBsB,SAArJ,SAEA,oBAAGe,UAAU,6BAAb,uBAAqDrC,EAAgBuB,SAArE,cCFOoB,MAhFf,YAAwG,IAAjFC,EAAgF,EAAhFA,SAAUC,EAAsE,EAAtEA,iBAAkB/C,EAAoD,EAApDA,cAAegD,EAAqC,EAArCA,sBAAuBC,EAAc,EAAdA,WACvF,EAA0ChD,qBAA1C,mBAAOiD,EAAP,KAAsBC,EAAtB,KAEA,SAASC,IACFC,UAAUC,aAUblB,QAAQmB,IAAI,qBAWhB,WACE,SAASC,IACP,OAAO,IAAI7C,SAAQ,SAAC8C,EAAS7C,GAAV,OACjByC,UAAUC,YAAYI,mBAAmBD,EAAS7C,MAItD,OAAO4C,IACJhD,MAAK,SAACmD,GAGL,MAAO,CAFWA,EAASC,OAAOC,SAAUjB,QAAQ,GACjCe,EAASC,OAAOE,UAAWlB,QAAQ,OAGvDV,OAAM,SAACC,GAEN,OADAC,QAAQC,MAAMF,EAAIG,SACXyB,OAzBTC,GACGxD,MACC,SAAAmD,GAAQ,OAAIX,EAAsBW,MAEnCnD,MACC,SAAAyD,GAAI,OAAId,EAAiBc,EAAKC,SAflC9B,QAAQmB,IAAI,yBACZQ,IACGvD,MACC,SAAAmD,GAAQ,OAAIX,EAAsBW,MAEnCnD,MACC,SAAAyD,GAAI,OAAId,EAAiBc,EAAKC,QAkCtC,SAASH,IACP,OAAOxD,MAAM,4BAAD,OAhDO,mBAiDhBC,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAEFE,QAAQC,OAAOC,MAAM,aAE7BL,MAAK,SAAAM,GAAI,OAAIA,EAAKC,UAClBP,MAAK,SAAAmD,GACJ,OAAOA,EAASQ,IAAIC,MAAM,QAE3BlC,OAAM,SAACC,GACNC,QAAQC,MAAMF,EAAIG,YAUxB,OANAjC,qBAAU,WACL0C,GACDK,MAEF,IAGA,sBAAKb,UAAU,cAAcG,MAAO,CAAE2B,QAASpB,EAAa,OAAS,MAArE,UAEIF,QAAsCzC,IAAlB4C,GACpB,cAAC,EAAD,CAAanD,OAAQmD,EAAelD,cAAeA,IAGpD8C,EAASwB,KAAI,SAACL,EAAMM,GAAP,OAAiB,cAAC,EAAD,CAAyBxE,OAAQkE,EAAKC,GAAIlE,cAAeA,GAAvCuE,U,sCCvCxCC,MArCf,YAA6D,IAAtC1B,EAAqC,EAArCA,SAAU2B,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,WAc5C,OACE,cAAC,IAAD,CAAiBC,UAbnB,SAAyBC,GAEvB,GAAKA,EAAOC,aACRD,EAAOC,YAAYN,QAAUK,EAAOE,OAAOP,MAA/C,CAEA,IAAMQ,EAAQC,MAAMC,KAAKnC,GACzB,EAAwBiC,EAAMG,OAAON,EAAOE,OAAOP,MAAO,GAAnDY,EAAP,oBACAJ,EAAMG,OAAON,EAAOC,YAAYN,MAAO,EAAGY,GAE1CV,EAAYM,KAIZ,SACE,cAAC,IAAD,CAAWK,YAAY,cAAvB,SACG,SAACC,GAAD,OACC,6CAAI9C,UAAU,eAAkB8C,EAASC,gBAAzC,IAAyDC,IAAKF,EAASG,SAAvE,UACG1C,EAASwB,KAAK,SAACL,EAAMM,GAAP,OACb,cAAC,IAAD,CAAyBkB,YAAaxB,EAAKC,GAAGwB,WAAYnB,MAAOA,EAAjE,SACG,SAACc,GAAD,OACC,yDAAI9C,UAAU,2BAA2BgD,IAAKF,EAASG,UAAcH,EAASM,gBAAoBN,EAASO,iBAA3G,cACE,oBAAGrD,UAAU,oBAAb,UAAkC0B,EAAKjD,KAAvC,KAA+CiD,EAAKhD,WACpD,wBAAQsB,UAAU,0BAA0BsD,KAAK,SAASC,QAAS,kBAAIpB,EAAWH,YAJxEN,EAAKC,OAStBmB,EAASU,sBC4HPC,MAvJf,YAAgK,IAArIlD,EAAoI,EAApIA,SAAU2B,EAA0H,EAA1HA,YAAaC,EAA6G,EAA7GA,WAAY3B,EAAiG,EAAjGA,iBAAkBkD,EAA+E,EAA/EA,oBAAqBjG,EAA0D,EAA1DA,cAAekG,EAA2C,EAA3CA,iBAAkBlD,EAAyB,EAAzBA,sBAEpI,EAA4C/C,mBAAS,IAArD,mBAAOkG,EAAP,KAAuBC,EAAvB,KACA,EAA4CnG,mBAAS,IAArD,mBAAOoG,EAAP,KAAuBC,EAAvB,KAyBA,SAASC,EAAoBC,GACxBA,EAAMC,OAAOC,QAAU1G,GACxBkG,EAAiBM,EAAMC,OAAOC,OA+BlC,IAAMC,EAAgBC,mBAEtB,SAASC,EAAmBL,GACnBG,EAAcG,QAAQC,SAASP,EAAMC,SACxCH,EAAkB,IAUxB,OANAjG,qBAAU,WAER,OADA2G,SAASC,iBAAiB,YAAaJ,GAChC,kBAAMG,SAASE,oBAAoB,YAAaL,MACtD,IAID,sBAAKtE,UAAU,kBAAf,UACE,oBAAIA,UAAU,4BAAd,sBACA,uBAAMA,UAAU,iCAAiC4E,SAxCrD,SAA2BX,GAGzB,OAFAA,EAAMY,iBAEC7G,MAAM,mDAAD,OAAoD4F,EAApD,2BA3Ce,qCA4C1B3F,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAEFE,QAAQC,OAAOC,MAAM,aAE7BL,MAAK,SAAAM,GAAI,OAAIA,EAAKC,UAClBP,MAAK,SAAAM,GAEJ,OADAsB,QAAQmB,IAAIzC,GACLA,KAERN,MAAK,SAAAM,GAAI,OAAIwF,EAAkBxF,MAC/BoB,OAAM,SAACC,GACNC,QAAQmB,IAAI,kBACZnB,QAAQC,MAAMF,EAAIG,aAsBlB,UACE,wBAAOC,UAAU,iCAAjB,mCAEE,uBAAOA,UAAU,uCAAuCsD,KAAK,WAAWwB,QAAStE,EAAkBuE,SA5E3G,WAEIrB,EAD6B,mBAArBlD,GACY,SAAAwE,GAAI,OAAKA,UA4E3B,sBAAKhF,UAAU,8BAAf,UACE,wBAAOA,UAAS,+BAA8C,aAAlBvC,EAA+B,iCAAmC,IAA9G,qBAEE,uBACEuC,UAAU,8BACVvB,KAAK,QACL6E,KAAK,QACLa,MAAM,WACNW,QAA2B,aAAlBrH,EACTsH,SAAUf,OAId,wBAAOhE,UAAS,+BAA8C,WAAlBvC,EAA6B,iCAAmC,IAA5G,mBAEE,uBACEuC,UAAU,8BACVvB,KAAK,QACL6E,KAAK,QACLa,MAAM,SACNW,QAA2B,WAAlBrH,EACTsH,SAAUf,OAId,wBAAOhE,UAAS,+BAA8C,aAAlBvC,EAA+B,iCAAmC,IAA9G,qBAEE,uBACEuC,UAAU,8BACVvB,KAAK,QACL6E,KAAK,QACLa,MAAM,WACNW,QAA2B,aAAlBrH,EACTsH,SAAUf,UAMhB,sBAAMhE,UAAU,kCAAkCgD,IAAKoB,EAAvD,UACE,uBAAOpE,UAAU,0BAAjB,SACE,uBACEA,UAAU,gCACVsD,KAAK,OACLE,YAAY,OACZW,MAAOP,EACPmB,SA/FZ,SAAyBd,GACvBJ,EAAkBI,EAAMC,OAAOC,YAmGxBL,EAAe/B,KAAI,SAACL,EAAMM,GACzB,OACE,sBAAKhC,UAAU,iCAA6CuD,QAAS,kBA3H1DjC,EA2H8EI,EAAKuD,IA3HzE1D,EA2H8EG,EAAKwD,IAvHlHzE,EAAsB,CAACa,EAAUC,IAC9BtD,MAAK,SAAAyD,GAAI,OAAIQ,GAAY,SAAA8C,GACxB,OAAGA,EAAKG,MAAK,SAAAC,GAAI,OAAIA,EAAKzD,KAAOD,EAAKC,MAC7BqD,EAEH,GAAN,mBAAWA,GAAX,CAAiBtD,UAErBqC,EAAkB,SAClBF,EAAkB,IAZpB,IAAuBvC,EAAUC,GA2HrB,UACE,oBAAGvB,UAAU,sCAAb,UAAoD0B,EAAKjD,KAAzD,IAAgEiD,EAAKhD,WACrE,oBAAGsB,UAAU,qCAAb,kBAAwD0B,EAAKuD,IAA7D,IAAmEvD,EAAKwD,IAAxE,SAFmDlD,YAS7D,cAAC,EAAD,CAAazB,SAAUA,EAAU2B,YAAaA,EAAaC,WAAYA,QCzC9DkD,MArGf,WACE,MAAgD3H,oBAAS,GAAzD,mBAAO8C,EAAP,KAAyBkD,EAAzB,KACA,EAA0ChG,mBAAS,UAAnD,mBAAOD,EAAP,KAAsBkG,EAAtB,KACA,EAAoCjG,oBAAS,GAA7C,mBAAOgD,EAAP,KAAmB4E,EAAnB,KACA,EAAgC5H,mBAAS,CACvC,CACAe,KAAM,UACNC,QAAS,KACTiD,GAAI,QAEJ,CACElD,KAAM,SACNC,QAAS,KACTiD,GAAI,UATR,mBAAOpB,EAAP,KAAiB2B,EAAjB,KA+BA,SAASzB,EAAT,GAAuD,IAAD,mBAAtBa,EAAsB,KAAZC,EAAY,KACpD,OAAOvD,MAAM,uDAAD,OAAwDsD,EAAxD,gBAAwEC,EAAxE,kBAxCe,qCAyCxBtD,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAEFE,QAAQC,OAAOC,MAAM,4CAE7BL,MAAK,SAAAC,GAAQ,OAAIA,EAASM,UAC1BP,MAAM,SAAAM,GACL,MAAO,CACLE,KAAMF,EAAKE,KACXC,QAASH,EAAKI,IAAID,QAClBiD,GAAIpD,EAAKoD,OAGZhC,OAAM,SAACC,GACNC,QAAQC,MAAMF,EAAIG,YAmBxB,OACE,sBAAKC,UAAU,gBAAf,UACE,wBAAQA,UAAU,+BAA+BuD,QAXrD,WACE+B,GAAc,SAAAN,GAAI,OAAKA,QAWrB,cAAC,EAAD,CACEzE,SAAUA,EACVC,iBAAkBA,EAClB/C,cAAeA,EACfgD,sBAAuBA,EACvBC,WAAYA,EACZ4E,cAAeA,IAGhB5E,GACC,cAAC,EAAD,CACEH,SAAUA,EACV2B,YAAaA,EACbC,WA/BR,SAAoBoD,GAClBrD,GAAY,SAAA8C,GACV,OAAOA,EAAKQ,QAAO,SAACC,EAAGzD,GAAJ,OAAcA,IAAUuD,SA8BvC/E,iBAAkBA,EAClBkD,oBAAqBA,EACrBjG,cAAeA,EACfkG,iBAAkBA,EAClBlD,sBAAuBA,EACvBC,WAAYA,EACZ4E,cAAeA,QC5FVI,MATf,WAEE,OACE,qBAAK1F,UAAU,MAAf,SACE,cAAC,EAAD,OCKS2F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5H,MAAK,YAAkD,IAA/C6H,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,SAG1BX,M","file":"static/js/main.b16f68fb.chunk.js","sourcesContent":["import './WeatherItem.scss';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst OPENWEATHERMAP_API_KEY = \"d79a6949b5e537387ac71885a0ebc698\";\r\n\r\nfunction WeatherItem({ cityId, selectedUnits }) {\r\n  // const cityId = 546105;\r\n  const [currentCityData, setCurrentCityData] = useState({});\r\n\r\n  function getCityWeather() {\r\n    return fetch(`https://api.openweathermap.org/data/2.5/weather?id=${cityId}&units=${selectedUnits}&appid=${OPENWEATHERMAP_API_KEY}`)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        return Promise.reject(Error('error'));\r\n      })\r\n      .then(data => data.json())\r\n      // .then(data => console.log(data))\r\n      .then(data => setCurrentCityData({\r\n        name: data.name,\r\n        country: data.sys.country,\r\n        temperature: data.main.temp,\r\n        feelsLike: data.main.feels_like,\r\n        pressure: data.main.pressure,\r\n        humidity: data.main.humidity,\r\n        visibility: data.visibility,\r\n        windDirection: data.wind.deg,\r\n        windSpeed: data.wind.speed,\r\n        description: data.weather[0].description,\r\n        icon: data.weather[0].icon\r\n      }))\r\n      .catch((err) => {\r\n        console.error(err.message);\r\n      });\r\n  }\r\n\r\n  function getTempUnit() {\r\n    if(selectedUnits === \"standard\") {\r\n      return <span>&#8490;</span>;\r\n    }\r\n    if(selectedUnits === \"metric\") {\r\n      return (\r\n        <span>&#8451;</span>\r\n        );\r\n    }\r\n    return <span>&#8457;</span>;\r\n  }\r\n\r\n  function getSpeedUnit() {\r\n    if(selectedUnits === \"imperial\") {\r\n      return \"mph\";\r\n    }\r\n    return \"m/s\";\r\n  }\r\n\r\n  function toWindTextualDescription(deg) {\r\n    if(deg === undefined) {\r\n      return \"NA\";\r\n    }\r\n    const compassSector = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\", \"N\"];\r\n    const indexOfCompassSector = (deg/22.5).toFixed(0);\r\n    return compassSector[indexOfCompassSector];\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(cityId !== undefined) {\r\n      getCityWeather()\r\n    }\r\n  },[cityId, selectedUnits]);\r\n\r\n  return (\r\n    <div className=\"WeatherItem\">\r\n      <h3 className=\"WeatherItem__city-name\">{currentCityData.name}, {currentCityData.country}</h3>\r\n\r\n      <div className=\"WeatherItem__general\">\r\n        <img className=\"WeatherItem__icon\" src={`https://openweathermap.org/img/wn/${currentCityData.icon}@2x.png`} alt=\"WeatherIcon\"></img>\r\n        <p className=\"WeatherItem__temperature\">{currentCityData.temperature} {getTempUnit()}</p>\r\n      </div>\r\n\r\n        <p className=\"WeatherItem__description\">\r\n          Feels Like {currentCityData.feelsLike} {getTempUnit()}, {currentCityData.description}\r\n        </p>\r\n\r\n      <div className=\"WeatherItem__extended\">\r\n        <p className=\"WeatherItem__extended-info\"> <span className=\"WeatherItem__extended-icon WeatherItem__extended-icon--wind-direction\" style={{transform: `rotate(${180+currentCityData.windDirection}deg)`}}></span> {currentCityData.windSpeed} {getSpeedUnit()} {toWindTextualDescription(currentCityData.windDirection)}</p>\r\n        <p className=\"WeatherItem__extended-info\"><span className=\"WeatherItem__extended-icon WeatherItem__extended-icon--pressure\"></span> {currentCityData.pressure}hPa</p>\r\n        \r\n        <p className=\"WeatherItem__extended-info\">Humidity: {currentCityData.humidity}%</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherItem;","import './WeatherList.scss';\r\nimport { useState, useEffect } from 'react';\r\nimport WeatherItem from './WeatherItem';\r\n\r\nconst IPINFO_API_KEY = \"9cc4b449f59c2b\";\r\n\r\nfunction WeatherList({ cityList, isLocalWeatherOn, selectedUnits, getReverseGeolocation, isMenuOpen }) {\r\n  const [currentCityId, setCurrentCityId] = useState();\r\n\r\n  function getCurrentCity() {\r\n    if (!navigator.geolocation) {\r\n      console.log(\"Geodata Not Available\");\r\n      getGeolocationByIp ()\r\n        .then(\r\n          position => getReverseGeolocation(position)\r\n        )\r\n        .then(\r\n          city => setCurrentCityId(city.id)\r\n        );\r\n    } else {\r\n      console.log(\"Geodata Available\");\r\n      getGeolocationApi()\r\n        .then(\r\n          position => getReverseGeolocation(position)\r\n        )\r\n        .then(\r\n          city => setCurrentCityId(city.id)\r\n        );\r\n    }\r\n  }\r\n\r\n  function getGeolocationApi() {\r\n    function getPosition(){\r\n      return new Promise((resolve, reject) => \r\n        navigator.geolocation.getCurrentPosition(resolve, reject)\r\n      );\r\n    }\r\n\r\n    return getPosition()\r\n      .then((position) => {\r\n        const latitude = (position.coords.latitude).toFixed(4);\r\n        const longitude = (position.coords.longitude).toFixed(4);\r\n        return [latitude, longitude];\r\n      })\r\n      .catch((err) => {\r\n        console.error(err.message);\r\n        return getGeolocationByIp();\r\n      });\r\n  }\r\n\r\n  // Returns array [latitude, longitude]\r\n  function getGeolocationByIp() {\r\n    return fetch(`https://ipinfo.io/?token=${IPINFO_API_KEY}`)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        return Promise.reject(Error('error'));\r\n      })\r\n      .then(data => data.json())\r\n      .then(position => {\r\n        return position.loc.split(',');\r\n      })\r\n      .catch((err) => {\r\n        console.error(err.message);\r\n      });\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(isLocalWeatherOn) {\r\n      getCurrentCity();\r\n    }\r\n  },[]);\r\n\r\n  return (\r\n    <div className=\"WeatherList\" style={{ display: isMenuOpen ? 'none' : null }}>\r\n      \r\n      {(isLocalWeatherOn && currentCityId !== undefined) &&\r\n        <WeatherItem cityId={currentCityId} selectedUnits={selectedUnits} />\r\n      }\r\n\r\n      {cityList.map((city, index) => <WeatherItem key={index} cityId={city.id} selectedUnits={selectedUnits} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherList;\r\n\r\n","import './AddedCities.scss';\r\n// import { useState, useEffect } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n\r\nfunction AddedCities({ cityList, setCityList, removeCity }) {\r\n\r\n  function handleOnDragEnd(result) {\r\n    // console.log(result);\r\n    if (!result.destination) return;\r\n    if (result.destination.index === result.source.index) return;\r\n\r\n    const items = Array.from(cityList);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    setCityList(items);\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n      <Droppable droppableId=\"AddedCities\">\r\n        {(provided) => (\r\n          <ul className=\"AddedCities\" {...provided.droppableProps} ref={provided.innerRef}>\r\n            {cityList.map( (city, index) =>\r\n              <Draggable key={city.id} draggableId={city.id.toString()} index={index}>\r\n                {(provided) => (\r\n                  <li className=\"AddedCities__single-city\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                    <p className=\"AddedCities__name\">{city.name}, {city.country}</p>\r\n                    <button className=\"AddedCities__remove-btn\" type=\"button\" onClick={()=>removeCity(index)}></button>\r\n                  </li>\r\n                )}\r\n              </Draggable>\r\n            )}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default AddedCities;","import './WeatherSettings.scss';\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\nimport AddedCities from './AddedCities';\r\n\r\nconst OPENWEATHERMAP_API_KEY = \"d79a6949b5e537387ac71885a0ebc698\";\r\n\r\nfunction WeatherSettings({ cityList, setCityList, removeCity, isLocalWeatherOn, setIsLocalWeatherOn, selectedUnits, setSelectedUnits, getReverseGeolocation }) {\r\n\r\n  const [cityInputState, setCityInputState] = useState(\"\");\r\n  const [matchingCities, setMatchingCities] = useState([]);\r\n\r\n  function toggleLocalWeather() {\r\n    if(typeof isLocalWeatherOn === \"boolean\") {\r\n      setIsLocalWeatherOn(prev => !prev);\r\n    } else {\r\n      setIsLocalWeatherOn(true);\r\n    }\r\n  }\r\n\r\n  function addInCityList(latitude, longitude) {\r\n    // if(latitude === undefined || longitude === undefined) {     \r\n    //   return;\r\n    // }\r\n    getReverseGeolocation([latitude, longitude])\r\n      .then(city => setCityList(prev=> {\r\n        if(prev.some(item => item.id === city.id)) {\r\n          return prev;\r\n        }\r\n        return [...prev, city];\r\n      }))\r\n    setMatchingCities([]);\r\n    setCityInputState(\"\");\r\n  }\r\n\r\n  function toggleSelectedUnits(event) {\r\n    if(event.target.value !== selectedUnits) {\r\n      setSelectedUnits(event.target.value);\r\n    }\r\n  }\r\n\r\n  function changeCityInput(event) {\r\n    setCityInputState(event.target.value);\r\n  }\r\n\r\n  function getMatchingCities(event) {\r\n    event.preventDefault();\r\n\r\n    return fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${cityInputState}&limit=10&appid=${OPENWEATHERMAP_API_KEY}`)\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response;\r\n      }\r\n      return Promise.reject(Error('error'));\r\n    })\r\n    .then(data => data.json())\r\n    .then(data => {\r\n      console.log(data);\r\n      return data;\r\n    })\r\n    .then(data => setMatchingCities(data))\r\n    .catch((err) => {\r\n      console.log(\"City not found\");\r\n      console.error(err.message);\r\n    });\r\n  }\r\n\r\n  ////Click outside SEARCH?! Close search list!\r\n  const searchCityRef = useRef();\r\n\r\n  function handleClickOutside(event) {\r\n      if (!searchCityRef.current.contains(event.target)) {\r\n        setMatchingCities([]);\r\n      }\r\n  };\r\n\r\n  useEffect(()=>{\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n  ////END of \"Click outside SEARCH?! Close search list!\"\r\n\r\n  return (\r\n    <div className=\"WeatherSettings\">\r\n      <h3 className=\"WeatherSettings__headline\">Settings</h3>\r\n      <form className=\"WeatherSettings__settings-form\" onSubmit={getMatchingCities}>\r\n        <label className=\"WeatherSettings__local-weather\">\r\n          Display local weather?\r\n          <input className=\"WeatherSettings__local-weather-input\" type=\"checkbox\" checked={isLocalWeatherOn} onChange={toggleLocalWeather}></input>\r\n        </label>\r\n        <div className=\"WeatherSettings__units-list\">\r\n          <label className={ `WeatherSettings__unit${ selectedUnits === \"standard\" ? \" WeatherSettings__unit--active\" : \"\" }` }>\r\n            standard\r\n            <input\r\n              className=\"WeatherSettings__unit-input\"\r\n              name=\"units\"\r\n              type=\"radio\"\r\n              value=\"standard\"\r\n              checked={selectedUnits === \"standard\"}\r\n              onChange={toggleSelectedUnits}\r\n            >\r\n            </input>\r\n          </label>\r\n          <label className={ `WeatherSettings__unit${ selectedUnits === \"metric\" ? \" WeatherSettings__unit--active\" : \"\" }` }>\r\n            metric\r\n            <input\r\n              className=\"WeatherSettings__unit-input\"\r\n              name=\"units\"\r\n              type=\"radio\"\r\n              value=\"metric\"\r\n              checked={selectedUnits === \"metric\"}\r\n              onChange={toggleSelectedUnits}\r\n            >             \r\n            </input>\r\n          </label>\r\n          <label className={ `WeatherSettings__unit${ selectedUnits === \"imperial\" ? \" WeatherSettings__unit--active\" : \"\" }` }>\r\n            imperial\r\n            <input\r\n              className=\"WeatherSettings__unit-input\"\r\n              name=\"units\"\r\n              type=\"radio\"\r\n              value=\"imperial\"\r\n              checked={selectedUnits === \"imperial\"}\r\n              onChange={toggleSelectedUnits}\r\n            >               \r\n            </input>\r\n          </label>\r\n        </div>\r\n\r\n        <div  className=\"WeatherSettings__search-wrapper\" ref={searchCityRef}>\r\n          <label className=\"WeatherSettings__search\">\r\n            <input\r\n              className=\"WeatherSettings__search-input\"\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={cityInputState}\r\n              onChange={changeCityInput}\r\n            >\r\n            </input>\r\n          </label>\r\n\r\n          {matchingCities.map((city, index) => {\r\n            return (\r\n              <div className=\"WeatherSettings__matching-city\" key={index} onClick={() => addInCityList(city.lat, city.lon)}>\r\n                <p className=\"WeatherSettings__matching-city-name\">{city.name},{city.country}</p>\r\n                <p className=\"WeatherSettings__matching-city-geo\">Geo [{city.lat},{city.lon}]</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </form>\r\n      \r\n      <AddedCities cityList={cityList} setCityList={setCityList} removeCity={removeCity} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherSettings;","import './WeatherWidget.scss';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport WeatherList from './WeatherList';\r\nimport WeatherSettings from './WeatherSettings';\r\n\r\nconst OPENWEATHERMAP_API_KEY = \"d79a6949b5e537387ac71885a0ebc698\";\r\n// const IPINFO_API_KEY = \"9cc4b449f59c2b\";\r\n// const isCurrentCityOn = true;\r\n\r\nfunction WeatherWidget() {\r\n  const [isLocalWeatherOn, setIsLocalWeatherOn] = useState(true);\r\n  const [selectedUnits, setSelectedUnits] = useState(\"metric\");\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [cityList, setCityList] = useState([\r\n    {\r\n    name: \"Kolpino\",\r\n    country: \"RU\",\r\n    id: 546105\r\n    },\r\n    {\r\n      name: \"Moscow\",\r\n      country: \"RU\",\r\n      id: 524901\r\n    }\r\n]);\r\n\r\n// eslint-disable-next-line\r\n  function getUserLanguage() {\r\n    const userLanguage = window.navigator ? (window.navigator.language ||\r\n      window.navigator.systemLanguage ||\r\n      window.navigator.userLanguage) : \"en-EN\";\r\n      if(userLanguage.toLowerCase().includes(\"pt_br\")) {\r\n        return \"pt_br\";\r\n      }\r\n      if(userLanguage.toLowerCase().includes(\"zh_cn\")) {\r\n        return \"zh_cn\";\r\n      }\r\n      if(userLanguage.toLowerCase().includes(\"zh_tw\")) {\r\n        return \"zh_tw\";\r\n      }\r\n\r\n      return userLanguage.slice(0,2).toLowerCase();\r\n  }\r\n\r\n  function getReverseGeolocation([latitude, longitude]) {\r\n    return fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${OPENWEATHERMAP_API_KEY}`)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        return Promise.reject(Error(\"No response from openweathermap.org!\"));\r\n      })\r\n      .then(response => response.json())\r\n      .then( data => {\r\n        return {\r\n          name: data.name,\r\n          country: data.sys.country,\r\n          id: data.id\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error(err.message);\r\n      });\r\n  }\r\n\r\n  function removeCity(RemIndex) {\r\n    setCityList(prev => {\r\n      return prev.filter((_, index) => index !== RemIndex);\r\n    })\r\n  }\r\n\r\n  function toggleMenu() {\r\n    setIsMenuOpen(prev => !prev);\r\n  }\r\n\r\n  // useEffect(()=> {\r\n  //   const body = document.querySelector('body');\r\n  //   body.style.overflow = isMenuOpen ? 'hidden' : 'auto'\r\n  // }, [isMenuOpen]);\r\n\r\n  return (\r\n    <div className=\"WeatherWidget\">\r\n      <button className=\"WeatherWidget__open-menu-btn\" onClick={toggleMenu}></button>\r\n      <WeatherList\r\n        cityList={cityList}\r\n        isLocalWeatherOn={isLocalWeatherOn}\r\n        selectedUnits={selectedUnits}\r\n        getReverseGeolocation={getReverseGeolocation}\r\n        isMenuOpen={isMenuOpen}\r\n        setIsMenuOpen={setIsMenuOpen}\r\n      />\r\n\r\n      {isMenuOpen &&\r\n        <WeatherSettings\r\n          cityList={cityList}\r\n          setCityList={setCityList}\r\n          removeCity={removeCity}\r\n          isLocalWeatherOn={isLocalWeatherOn}\r\n          setIsLocalWeatherOn={setIsLocalWeatherOn}\r\n          selectedUnits={selectedUnits}\r\n          setSelectedUnits={setSelectedUnits}\r\n          getReverseGeolocation={getReverseGeolocation}\r\n          isMenuOpen={isMenuOpen}\r\n          setIsMenuOpen={setIsMenuOpen}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherWidget;\r\n\r\n","import './App.css';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <WeatherWidget />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}